System prompt:
You are a helpful, respectful and honest network configuration assistant.
You provide extended named access control list scripts in Cisco IOS syntax to fulfill the requirements you're given.
You always provide the script as it would be found in a configuration file.
Make sure to use the syntax for *extended* and *named* access control lists.
Make sure to not include any remarks, comments or explanations inside the script. 
Make sure to not include any console navigation commands.
Make sure to give the access control list a representative, brief, alphanumeric name with no punctuation.
When asked to give only the solution code wrap it around triple ticks (```) without specifying any languages.

User prompt:
Please help me figure out the script for an extended named ACL that permits all traffic from network 192.168.1.0/24 to network 192.168.2.0/24, and denies all other traffic. First help me break down the previous description into all the individual requirements this ACL needs to fulfill

The model's response:
Based on your description, the requirements for this extended named ACL are:

1. The ACL should be named (representative, brief, alphanumeric name with no punctuation).
   Example: "permutehomedata"

2. The ACL should be an extended ACL (permitting protocols to be specified).
   Example: "ip"

   ```ip access-list extended permutehomedata```

3. The ACL should permit all traffic (ICMP, TCP, UDP, etc.) from network 192.168.1.0/24 to network 192.168.2.0/24.
   Example: 
   ```
   permutehomedata 10 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255```

4. The ACL should deny all other traffic.
   Example: 
   ```
   permutehomedata 20 deny ip any any```

User prompt:
Now for each requirement identify which protocol, source ip addresses, source wildcard (if applicable), destination ip addresses, destination wildcard (if applicable), and ports (if applicable) are involved

The model's response:
Based on the requirements, here are the details for each:

1. The ACL should be named "permutehomedata"

   * Protocol: None (ACL naming does not specify a protocol)
   * Source IP Address: N/A (ACL naming does not specify source IP address)
   * Source Wildcard: N/A
   * Destination IP Address: N/A
   * Destination Wildcard: N/A
   * Ports: N/A

2. The ACL should be an extended ACL and permit all protocols (ICMP, TCP, UDP, etc.)   from network 192.168.1.0/24 to network 192.168.2.0/24.

   * Protocol: ip (all protocols, including TCP, UDP, ICMP, etc.)
   * Source IP Address: 192.168.1.0
   * Source Wildcard: 0.0.0.255 (subnet mask indicating a /24 network)
   * Destination IP Address: 192.168.2.0
   * Destination Wildcard: 0.0.0.255 (subnet mask indicating a /24 network)
   * Ports: N/A (all ports are being permitted)

3. The ACL should deny all other traffic.

   * Protocol: ip (all protocols, including TCP, UDP, ICMP, etc.)
   * Source IP Address: any
   * Source Wildcard: N/A (any source address)
   * Destination IP Address: any
   * Destination Wildcard: N/A (any destination address)
   * Ports: N/A (all ports are being denied)

User prompt:
Now give me the commands that would implement each of those requirements

The model's response:
Here are the commands that implement each of the requirements:

1. The ACL should be named "permutehomedata"

```
ip access-list extended permutehomedata
```

2. The ACL should be an extended ACL and permit all protocols (ICMP, TCP, UDP, etc.) from network 192.168.1.0/24 to network 192.168.2.0/24.

```
permutehomedata 10 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255
```

3. The ACL should deny all other traffic.

```
permutehomedata 20 deny ip any any
```

User prompt:
Now tell me the order the commands should be arranged into to fulfill the requirements properly

The model's response:
To fulfill the requirements properly, the commands should be arranged in the following order:

```
ip access-list extended permutehomedata
permutehomedata 10 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255
permutehomedata 20 deny ip any any
```

Alternatively, the "deny any any" statement can be placed at the end because the implicit "deny ip any any" at the end of an ACL means any traffic not explicitly permitted will be denied. Therefore all that is required is:

```
ip access-list extended permutehomedata
permutehomedata 10 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255
```

User prompt:
Now give me the command that starts the list and gives it a name

The model's response:
```
ip access-list extended permutehomedata
```

User prompt:
Now put all the commands together to create the full ACL script

The model's response:
```
```
ip access-list extended permutehomedata
permutehomedata 10 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255
```
```

Alternatively, since the implicit "deny ip any any" at the end of an ACL denies any traffic not explicitly permitted, the "permit" line alone is sufficient:

```
```
ip access-list extended permutehomedata
permutehomedata 10 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255
```

User prompt:
Now please give me only the solution as only one code snippet so I can store it in a configuration file (without explanations or any other text)

The model's response:
```
ip access-list extended permutehomedata
permutehomedata 10 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255
```

