System prompt:
You are a helpful, respectful and honest network configuration assistant.
You provide extended named access control list scripts in Cisco IOS syntax to fulfill the requirements you're given.
You always provide the script as it would be found in a configuration file.
Make sure to use the syntax for *extended* and *named* access control lists.
Make sure to not include any remarks, comments or explanations inside the script. 
Make sure to not include any console navigation commands.
Make sure to give the access control list a representative, brief, alphanumeric name with no punctuation.
When asked to give only the solution code wrap it around triple ticks (```) without specifying any languages.

User prompt:
Please help me figure out the script for an extended named ACL that allows all traffic from network 192.168.255.32/28, and blocks all other traffic. First help me break down the previous description into all the individual requirements this ACL needs to fulfill

The model's response:
Let's break down the requirements for the extended named ACL into individual components:

1.  It is an extended ACL (can filter based on source and/or destination IP, ports, protocol, etc.)
2.  It is a named ACL (not numbered)
3.  It allows traffic from network 192.168.255.32/28 to any destination
4.  It blocks (denies) all other traffic (regardless of direction)

User prompt:
Now for each requirement identify which protocol, source ip addresses, source wildcard (if applicable), destination ip addresses, destination wildcard (if applicable), and ports (if applicable) are involved

The model's response:
Here's the breakdown of details for each requirement:

1.  Extended ACL:
    * Protocol: All (including TCP, UDP, ICMP, etc.)
2.  Named ACL:
    * No specific protocol, source IP, destination IP, or ports are involved
3.  Allow traffic from network 192.168.255.32/28 to any destination:
    * Protocol: All
    * Source IP: 192.168.255.32
    * Source wildcard: 0.0.0.15 (to match the /28 subnet mask)
    * Destination IP: Any (0.0.0.0)
    * Destination wildcard: 255.255.255.255
    * Ports: Any
4.  Block (deny) all other traffic:
    * Protocol: All
    * Source IP: Any
    * Source wildcard: 255.255.255.255
    * Destination IP: Any
    * Destination wildcard: 255.255.255.255
    * Ports: Any

User prompt:
Now give me the commands that would implement each of those requirements

The model's response:
```
ip access-list extended Allow32
 permit ip 192.168.255.32 0.0.0.15 any
 deny ip any any
```

User prompt:
Now tell me the order the commands should be arranged into to fulfill the requirements properly

The model's response:
The order of the commands does matter in ACLs, as they are processed in a top-down manner. The correct order is:

1. Permit traffic from network 192.168.255.32/28 to any destination
2. Block (deny) all other traffic

This is because once a packet is matched by an entry in the ACL, the processing stops. Therefore, you want to permit the desired traffic first, and then have a catch-all entry to block any other traffic.

The order of the commands in the previous script is correct, so no changes are needed.

User prompt:
Now give me the command that starts the list and gives it a name

The model's response:
```
ip access-list extended Allow32
```

User prompt:
Now put all the commands together to create the full ACL script

The model's response:
```
ip access-list extended Allow32
 permit ip 192.168.255.32 0.0.0.15 any
 deny ip any any
```

User prompt:
Now please give me only the solution as only one code snippet so I can store it in a configuration file (without explanations or any other text)

The model's response:
```
ip access-list extended Allow32
 permit ip 192.168.255.32 0.0.0.15 any
 deny ip any any
```

