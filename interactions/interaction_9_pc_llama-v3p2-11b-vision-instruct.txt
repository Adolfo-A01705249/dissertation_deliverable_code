System prompt:
You are a helpful, respectful and honest network configuration assistant.
You provide extended named access control list scripts in Cisco IOS syntax to fulfill the requirements you're given.
You always provide the script as it would be found in a configuration file.
Make sure to use the syntax for *extended* and *named* access control lists.
Make sure to not include any remarks, comments or explanations inside the script. 
Make sure to not include any console navigation commands.
Make sure to give the access control list a representative, brief, alphanumeric name with no punctuation.
When asked to give only the solution code wrap it around triple ticks (```) without specifying any languages.

User prompt:
Please help me figure out the script for an extended named ACL that allows traffic to server 172.27.8.55 only via web, blocks all tcp traffic to servers 172.27.8.53 and 172.27.8.54, and allows all other traffic. First help me break down the previous description into all the individual requirements this ACL needs to fulfill

The model's response:
Here are the individual requirements that the extended named ACL needs to fulfill:

1. Allow traffic to server 172.27.8.55 only via web ( tcp/80):
	* source: any
	* destination: 172.27.8.55
	* destination port: 80 (http)
	* action: permit
2. Block all tcp traffic to server 172.27.8.53:
	* source: any
	* destination: 172.27.8.53
	* protocol: tcp
	* action: deny
3. Block all tcp traffic to server 172.27.8.54:
	* source: any
	* destination: 172.27.8.54
	* protocol: tcp
	* action: deny
4. Allow all other traffic:
	* action: permit (default)

Let me know if this is a correct breakdown of the requirements. I'll proceed to writing the ACL script!

User prompt:
Now for each requirement identify which protocol, source ip addresses, source wildcard (if applicable), destination ip addresses, destination wildcard (if applicable), and ports (if applicable) are involved

The model's response:
Here is the breakdown for each requirement:

**Allow traffic to server 172.27.8.55 only via web (tcp/80)**

1. Protocol: TCP
2. Source IP addresses: any
3. Source wildcard: None (explicit IP address 0.0.0.0/0 is not needed)
4. Destination IP addresses: 172.27.8.55
5. Destination wildcard: None
6. Destination ports: TCP/80 (http)

**Block all tcp traffic to server 172.27.8.53**

1. Protocol: TCP
2. Source IP addresses: any
3. Source wildcard: None (explicit IP address 0.0.0.0/0 is not needed)
4. Destination IP addresses: 172.27.8.53
5. Destination wildcard: None
6. Destination ports: any ( implicit is any/any )

**Block all tcp traffic to server 172.27.8.54**

1. Protocol: TCP
2. Source IP addresses: any
3. Source wildcard: None (explicit IP address 0.0.0.0/0 is not needed)
4. Destination IP addresses: 172.27.8.54
5. Destination wildcard: None
6. Destination ports: any ( implicit is any/any )

**Allow all other traffic (not specified, imlicated implicit deny any/any/any)**

User prompt:
Now give me the commands that would implement each of those requirements

The model's response:
Here are the commands that implement each requirement:

**Allow traffic to server 172.27.8.55 only via web (tcp/80)**
```
access-list permit tcp any 172.27.8.55 eq 80
```

**Block all tcp traffic to server 172.27.8.53**
```
access-list deny tcp any 172.27.8.53 any
```

**Block all tcp traffic to server 172.27.8.54**
```
access-list deny tcp any 172.27.8.54 any
```

Let me know when you are ready for me to create the entire named ACL script

User prompt:
Now tell me the order the commands should be arranged into to fulfill the requirements properly

The model's response:
To fulfill the requirements properly, the commands should be arranged in the following order:

1. **Block all tcp traffic to server 172.27.8.54**
```
access-list deny tcp any 172.27.8.54 any
```
2. **Block all tcp traffic to server 172.27.8.53**
```
access-list deny tcp any 172.27.8.53 any
```
3. **Allow traffic to server 172.27.8.55 only via web (tcp/80)**
```
access-list permit tcp any 172.27.8.55 eq 80
```
4. **To ensure all other traffic is allowed, an implicit deny at the end is actually not required in a named access list configured for extended ACL**
   but to be thorough and note that in implicit any mode in named access lists "deny any any any" and can used**

User prompt:
Now give me the command that starts the list and gives it a name

The model's response:
Here is the command that starts the list and gives it a name:

```
ip access-list extended BLOCK_SERVERS
```

This command creates a new named extended ACL called "BLOCK_SERVERS" which will hold the rules that follow.

Let me know if you are ready for me to provide the complete named ACL script with all the commands.

User prompt:
Now put all the commands together to create the full ACL script

The model's response:
```
ip access-list extended BLOCK_SERVERS
access-list BLOCK_SERVERS deny tcp any 172.27.8.54 any
access-list BLOCK_SERVERS deny tcp any 172.27.8.53 any
access-list BLOCK_SERVERS permit tcp any 172.27.8.55 eq 80
```

User prompt:
Now please give me only the solution as only one code snippet so I can store it in a configuration file (without explanations or any other text)

The model's response:
```
ip access-list extended BLOCK_SERVERS
access-list BLOCK_SERVERS deny tcp any 172.27.8.54 any
access-list BLOCK_SERVERS deny tcp any 172.27.8.53 any
access-list BLOCK_SERVERS permit tcp any 172.27.8.55 eq 80
```

