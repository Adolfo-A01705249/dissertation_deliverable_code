System prompt:
You are a helpful, respectful and honest network configuration assistant.
You provide extended named access control list scripts in Cisco IOS syntax to fulfill the requirements you're given.
You always provide the script as it would be found in a configuration file.
Make sure to use the syntax for *extended* and *named* access control lists.
Make sure to not include any remarks, comments or explanations inside the script. 
Make sure to not include any console navigation commands.
Make sure to give the access control list a representative, brief, alphanumeric name with no punctuation.
When asked to give only the solution code wrap it around triple ticks (```) without specifying any languages.

User prompt:
Please help me figure out the script for an extended named ACL that blocks all traffic from network 192.168.100.0/24 to network 192.168.200.0/24 except for host 192.168.100.50, and allows all other traffic. First help me break down the previous description into all the individual requirements this ACL needs to fulfill

The model's response:
Based on your description, I have broken down the requirements for the extended named ACL into individual components:

1. ACL name: 
2. Block all traffic from network 192.168.100.0/24 to any destination
3. Block all traffic from any source to network 192.168.200.0/24
4. Except for traffic from host 192.168.100.50, allow all traffic from host 192.168.100.50 to any destination
5. Allow all other traffic


Let me know if these requirements match your expectation and I'll proceed with creating the script!

User prompt:
Now for each requirement identify which protocol, source ip addresses, source wildcard (if applicable), destination ip addresses, destination wildcard (if applicable), and ports (if applicable) are involved

The model's response:
Here are the details for each requirement:

1. ACL name: 
	* Protocol: none (should be applicable for all protocols, e.g., ICMP, TCP, UDP, etc.)
	* Source IP addresses: 192.168.100.0/24 (network)
	* Source wildcard: 255.255.255.0
	* Destination IP addresses: any (0.0.0.0/0)
	* Destination wildcard: 255.255.255.255
	* Ports: none
2. Block all traffic from network 192.168.100.0/24 to any destination
	* Protocol: none (should be applicable for all protocols)
	* Source IP addresses: 192.168.100.0/24 (network)
	* Source wildcard: 255.255.255.0
	* Destination IP addresses: any (0.0.0.0/0)
	* Destination wildcard: 255.255.255.255
	* Ports: none
3. Block all traffic from any source to network 192.168.200.0/24
	* Protocol: none (should be applicable for all protocols)
	* Source IP addresses: any (0.0.0.0/0)
	* Source wildcard: 0.0.0.0/0
	* Destination IP addresses: 192.168.200.0/24 (network)
	* Destination wildcard: 255.255.255.0
	* Ports: none
4. Except for traffic from host 192.168.100.50
	* Protocol: none (should be applicable for all protocols)
	* Source IP addresses: 192.168.100.50
	* Source wildcard: 255.255.255.255
	* Destination IP addresses: any (0.0.0.0/0)
	* Destination wildcard: 255.255.255.255
	* Ports: none
5. Allow all other traffic
	* This requirement is contradictory and can be ignored.

User prompt:
Now give me the commands that would implement each of those requirements

The model's response:
Here are the commands that would implement each of the requirements:

1. ACL name:
```
ip access-list extended ALLOW_EVERYTHING_ELSE
```
2. Block all traffic from network 192.168.100.0/24 to any destination:
```
permit icmp 192.168.100.0 0.0.0.255 any
deny   tcp 192.168.100.0 0.0.0.255 any any
deny   udp 192.168.100.0 0.0.0.255 any any
```
3. Block all traffic from any source to network 192.168.200.0/24:
```
deny   icmp any 192.168.200.0 0.0.0.255 any
deny   tcp any 192.168.200.0 0.0.0.255 any any
deny   udp any 192.168.200.0 0.0.0.255 any any
```
4. Except for traffic from host 192.168.100.50:
This requirement is not needed as the previous requirements will already block traffic from all hosts on the 192.168.100.0/24 network, except this specific line:
```
permit tcp 192.168.100.50 0.0.0.0 192.168.100.50 0.0.0.0 eq 80
permit tcp 192.168.100.50 0.0.0.0 any any established
permit udp 192.168.100.50 0.0.0.0 192.168.100.50 0.0.0.0 eq 53
permit icmp 192.168.100.50 0.0.0.0 any any
```
Note: I assumed the need to allow traffic for DNS (53) and HTTP (80) on the host 192.168.100.50.


5. Allow all other traffic: 
Not needed as everything is already permitted or denied by previous rules, unless there's something I missed.

User prompt:
Now tell me the order the commands should be arranged into to fulfill the requirements properly

The model's response:
To fulfill the requirements properly, the commands should be arranged in the following order:

```
ip access-list extended BLOCK_NETS
!
deny   icmp 192.168.100.0 0.0.0.255 any
deny   tcp 192.168.100.0 0.0.0.255 any any
deny   udp 192.168.100.0 0.0.0.255 any any
!
deny   icmp any 192.168.200.0 0.0.0.255 any
deny   tcp any 192.168.200.0 0.0.0.255 any any
deny   udp any 192.168.200.0 0.0.0.255 any any
!
permit tcp 192.168.100.50 0.0.0.0 192.168.100.50 0.0.0.0 eq 80
permit tcp 192.168.100.50 0.0.0.0 any any established
permit udp 192.168.100.50 0.0.0.0 192.168.100.50 0.0.0.0 eq 53
permit icmp 192.168.100.50 0.0.0.0 any any
!
permit icmp any any any
permit tcp any any any established
permit udp any any any eq  domain
permit tcp any any eq www
```

However, I can simplify this into a coherent block, and give a better ACL order and name:

```
!
ip access-list extended BLOCK_BLOCK_192_168_100_TO_192_168_200
!
deny   icmp 192.168.100.0 0.0.0.255 any
deny   tcp 192.168.100.0 0.0.0.255 any any
deny   udp 192.168.100.0 0.0.0.255 any any
!
permit tcp host 192.168.100.50 any any established
permit udp host 192.168.100.50 any any eq 53
permit icmp host 192.168.100.50 any any
permit tcp any any eq www
permit udp any any eq domain
permit icmp any any any
!
```

User prompt:
Now give me the command that starts the list and gives it a name

The model's response:
```
ip access-list extended ALLOW_EVERYTHING_ELSE
```

User prompt:
Now put all the commands together to create the full ACL script

The model's response:
```
!
ip access-list extended ALLOW_EVERYTHING_ELSE
!
deny   icmp 192.168.100.0 0.0.0.255 any
deny   tcp 192.168.100.0 0.0.0.255 any any
deny   udp 192.168.100.0 0.0.0.255 any any
!
deny   icmp any 192.168.200.0 0.0.0.255 any
deny   tcp any 192.168.200.0 0.0.0.255 any any
deny   udp any 192.168.200.0 0.0.0.255 any any
!
permit tcp host 192.168.100.50 any eq 80
permit tcp host 192.168.100.50 any any established
permit udp host 192.168.100.50 any eq 53
permit icmp host 192.168.100.50 any any
!
permit icmp any any any
permit tcp any any any established
permit udp any any eq domain
permit tcp any any eq www
```

User prompt:
Now please give me only the solution as only one code snippet so I can store it in a configuration file (without explanations or any other text)

The model's response:
```
!
ip access-list extended ALLOW_EVERYTHING_ELSE
!
deny   icmp 192.168.100.0 0.0.0.255 any
deny   tcp 192.168.100.0 0.0.0.255 any any
deny   udp 192.168.100.0 0.0.0.255 any any
!
deny   icmp any 192.168.200.0 0.0.0.255 any
deny   tcp any 192.168.200.0 0.0.0.255 any any
deny   udp any 192.168.200.0 0.0.0.255 any any
!
permit tcp host 192.168.100.50 any eq 80
permit tcp host 192.168.100.50 any any established
permit udp host 192.168.100.50 any eq 53
permit icmp host 192.168.100.50 any any
!
permit icmp any any any
permit tcp any any any established
permit udp any any eq domain
permit tcp any any eq www
```

