System prompt:
You are a helpful, respectful and honest network configuration assistant.
You provide extended named access control list scripts in Cisco IOS syntax to fulfill the requirements you're given.
You always provide the script as it would be found in a configuration file.
Make sure to use the syntax for *extended* and *named* access control lists.
Make sure to not include any remarks, comments or explanations inside the script. 
Make sure to not include any console navigation commands.
Make sure to give the access control list a representative, brief, alphanumeric name with no punctuation.
When asked to give only the solution code wrap it around triple ticks (```) without specifying any languages.

User prompt:
Please help me figure out the script for an extended named ACL that permits all traffic from network 192.168.1.0/24 to network 192.168.2.0/24, and denies all other traffic. First help me break down the previous description into all the individual requirements this ACL needs to fulfill

The model's response:
To break down the individual requirements, the ACL needs to fulfill the following:

1. Permit all traffic
2. The traffic is coming from network 192.168.1.0/24
3. The traffic is going to network 192.168.2.0/24
4. Deny all other traffic

Here is an order for these so the rules are implemented correctly:

1. Permit traffic from 192.168.1.0/24 to 192.168.2.0/24
2. Deny all other traffic

User prompt:
Now for each requirement identify which protocol, source ip addresses, source wildcard (if applicable), destination ip addresses, destination wildcard (if applicable), and ports (if applicable) are involved

The model's response:
Based on the requirements:

1. Permit traffic from 192.168.1.0/24 to 192.168.2.0/24

   - Protocol: All protocols (ip)
   - Source IP addresses: 192.168.1.0
   - Source wildcard: 0.0.0.255
   - Destination IP addresses: 192.168.2.0
   - Destination wildcard: 0.0.0.255
   - Ports: All ports

2. Deny all other traffic

   - Protocol: All protocols (ip)
   - Source IP addresses: Any
   - Source wildcard: None (any is 0.0.0.0 255.255.255.255)
   - Destination IP addresses: Any
   - Destination wildcard: Any (0.0.0.0 255.255.255.255)
   - Ports: All ports

User prompt:
Now give me the commands that would implement each of those requirements

The model's response:
```
ip access-list extended IP_TO_IP
 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255
 deny ip any any
```

User prompt:
Now tell me the order the commands should be arranged into to fulfill the requirements properly

The model's response:
The commands are already in the correct order. 

1. Permit traffic from 192.168.1.0/24 to 192.168.2.0/24
2. Deny all other traffic

If you were to swap these two lines, the ACL would never permit anything, because as soon as it hits the "deny ip any any", it stops checking.

User prompt:
Now give me the command that starts the list and gives it a name

The model's response:
```
ip access-list extended Permit1To2
```

This starts the list giving it a name of "Permit1To2". You would then use this name in the rest of your configuration file when referencing this ACL, like so:

```
ip access-list extended Permit1To2
 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255
 deny ip any any
```

User prompt:
Now put all the commands together to create the full ACL script

The model's response:
```
ip access-list extended Permit1To2
 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255
 deny ip any any
```

User prompt:
Now please give me only the solution as only one code snippet so I can store it in a configuration file (without explanations or any other text)

The model's response:
```
ip access-list extended Permit1To2
 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255
 deny ip any any
```

